; Porto Alegre, outubro de 2021
; Andrei Pochmann Koenich
; Matrícula: 00308680
; Trabalho de programação - Processador CESAR - Semestre 2021/1

; O programa a seguir consiste em uma implementação do Kernel e as funções da API (Application Programming Interface). Isso envolve a
; inicialização do Kernel e suas variáveis, a inicialização do sistema de interrupções, os tratadores de interrupção do teclado e do
; timer, e algumas funções de "sistema". Após encerrados todos os procedimentos de inicialização do Kernel, será executado um desvio (JMP) para
; o endereço onde está o programa de aplicação (fornecido pelos professores), de maneira a iniciar sua operação. As áreas de memória do programa
; estão todas descritas abaixo. Acima de cada função implementada, há uma descrição sobre o seu funcionamento.

;******************************************************************************
;
;	Áreas de Memória
;
;	0000 - 7FFF		_KERNEL
;					Área de Kernel para implementação dos alunos.
;
;	0100 - 01FF		_VETTAB
;					Tabela com os vetores das funções do kernel.
;
;	8000 - FF7F		_APP
;					Área onde será colocado o programa de aplicação.
;					Esse programa fará o acesso aos periféricos e interrupções, através das funções do Kernel.
;
;	FF80 - FFBF 		_IOAREA16
;					Area de perifericos, acessada na base 16 bits.
;
;	FFC0 - FFFF		_IOAREA08
;					Area de perifericos, acessada na base 8 bits.
;
;******************************************************************************

_KERNEL:	EQU	H0000
_VETTAB:	EQU	H0100
_APP:		EQU	H8000
_IOAREA16:	EQU	HFF80
_IOAREA08:	EQU	HFFC0

;------------------------------------------------------------------------------
;	Área reservada para os periféricos
;------------------------------------------------------------------------------

; Acesso em 16 bits
		ORG		_IOAREA16
		DAW		[31]
IVET:	DAW		0			; Vetor de interrupção

; Acesso em 8 bits
		ORG		_IOAREA08
		DAB		[23]
TIMDT:	DB		0			; Registro de programação do timer
INTS:	DB		0			; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	DB		0			; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	DB		0			; Status do teclado
TECDT:	DB		0			; Dado do teclado
VISOR:	DAB		[36]			; Portas de acesso ao visor
	

;------------------------------------------------------------------------------
;	Ponto de entrada do RESET do processador
;------------------------------------------------------------------------------

		ORG		_KERNEL
		JMP		_RESET

;------------------------------------------------------------------------------
;	Area do kernel com os vetores das funções do kernel
;------------------------------------------------------------------------------

		ORG		_VETTAB
		DW		_kbhit
		DW		_getchar
		DW		_putchar
		DW		_get_clock_status
		DW		_get_clock_time
		DW		_turnon_clock
		DW		_clr_clock

;------------------------------------------------------------------------------
;	Código de RESET (BOOT) do processador/interrupção
;------------------------------------------------------------------------------

		ORG		_VETTAB+H0100

_RESET:

; 1) Desabilitar o sistema de interrupções

		MOV #0,INTE	; Desabilita o sistema de interrupções, movendo 0 para o endereço INTE.

; 2) Inicializar o stack pointer (SP = R6)

		MOV #H7FFD,R6	; Inicializa o ponteiro de pilha na última posição de memória disponível.

; 3) Inicializar as variáveis internas usadas pelo sistema de interrupções e periféricos (IVET, INTE, etc.)

		MOV #ISR,IVET	; Inicializa o vetor de interrupções com o endereço dos tratadores de interrupção.
		MOV #H03,INTE	; Inicializa o byte responsável por habilitar as interrupções.
		MOV #H00,INTS	; Inicializa o byte responsável por informar o status das interrupções.

; 4) Inicializar as variáveis internas do kernel

		CLR Cursor	; Variavel responsável por indicar a posição de escrita no visor.
		CLR Count	; Variável responsável por auxiliar na operação de multiplicação.

		CLR Status0	; Variável responsável por indicar o status do relógio 0 (se está visível e se está andando).
		CLR Min0	; Variável responsável por indicar o tempo em minutos do relógio 0.
		CLR Seg0	; Variável responsável por indicar o tempo em segundos do relógio 0.

		CLR Status1	; Variável responsável por indicar o status do relógio 1 (se está visível e se está andando).
		CLR Min1	; Variável responsável por indicar o tempo em minutos do relógio 1.
		CLR Seg1	; Variável responsável por indicar o tempo em segundos do relógio 1.

		CLR Tecla	; Variável responsável por armazenar o ASCII de uma tecla digitada.
		CLR TeclaAux	; Variável responsável por armazenar o ASCII do caractere da posição do cursor no visor.

		CLR Ciclo	; Variável responsável por contabilizar tempo de meio segundo ou de um segundo na rotina de interrupção do timer.
	
		MOV #'0',A_0 	; Variável que representa o primeiro dígito do relógio 0.
		MOV #'0',B_0 	; Variável que representa o segundo dígito do relógio 0.
		MOV #'0',C_0 	; Variável que representa o terceiro dígito do relógio 0.
		MOV #'0',D_0 	; Variável que representa o quarto dígito do relógio 0.

		MOV #'0',A_1 	; Variável que representa o primeiro dígito do relógio 1.
		MOV #'0',B_1 	; Variável que representa o segundo dígito do relógio 1.
		MOV #'0',C_1 	; Variável que representa o terceiro dígito do relógio 1.
		MOV #'0',D_1 	; Variável que representa o quarto dígito do relógio 1.

; 5) Inicializar o teclado zerando o byte de estado (TECST, endereço 65498)

		CLR TECDT 	; Zera o byte que grava a tecla pressionada pelo usuário.
		CLR TECST 	; Zera o byte de estado do teclado.

; 6) Inicializar o timer

		MOV #100, TIMDT ; Inicializa o timer com o tempo de 100ms.

; 7) Limpar o visor

		JSR R7,Limpa 	; Apaga todos os caracteres do visor.

; 8) Habilitar interrupções

		MOV #H83,INTE 	; Habilita as interrupções.

; 9) Retornar para o programa de aplicação com um desvio para o endereço _APP da memória

		JMP _APP 	; Direciona a execução do programa para a aplicação.
	
;------------------------------------------------------------------------------
; Função através da qual pode-se solicitar ao kernel a informação sobre a existência de tecla digitada.
; A função deve retornar com a informação da existência de tecla, sem aguardar pela digitação de qualquer tecla. 
; - Parâmetros de entrada: nenhum. 
; - Parâmetro de saída: registrador R0, com a informação da existência de tecla. 
; A função retorna no registrador R0 a informação se existe tecla ou não. 
; - Se há tecla, o valor em R0 será zero; 
; - Se não há tecla, o valor em R0 será um valor qualquer diferente de zero. 
;------------------------------------------------------------------------------

_kbhit:		CLR R0		; Zera o registrador R0.
		TST Tecla	; Verifica se há tecla pressionada.
		BEQ kbhit_fim	; Se há tecla pressionada, encerra a função.
		MOV #1,R0	; Retorna 1 em R0, indicando a inexistência de tecla.
kbhit_fim:	RTS R7		; Retorno da subrotina correspondente à função.
				
;------------------------------------------------------------------------------
; Função através da qual pode-se solicitar ao kernel que aguarde pela digitação de uma tecla.
; A função deve retornar o código ASCII da tecla digitada.
; Portanto, a função deve aguardar pela digitação de uma tecla. 
; - Parâmetros de entrada: nenhum. 
; - Parâmetro de saída: registrador R0, com a tecla digitada. 
; A função só retorna (só termina) quando o usuário digitar alguma tecla.
; O código ASCII da tecla digitada deve ser retornado no registrador R0. 
; Sempre que a função “_getchar” for chamada e estiver bloqueada aguardando por uma tecla,
;     a posição do cursor deve ser apresentado no visor através do símbolo “_” (underscore).
; Esse símbolo deve ser alternado com o caractere que estiver sendo apresentado nessa posição.
; Essa alternância deve ter uma periodicidade tal que cada símbolo permaneça no visor por 500ms. 
;------------------------------------------------------------------------------

_getchar:

testa:		TST Tecla	; Testa se foi pressionada uma tecla.
		BEQ testa   	; Enquanto uma tecla não é digitada, continua o teste.	
		MOV Tecla,R0	; Retorna a tecla digitada em R0.
		CLR Tecla	; Limpa a variável responsável por armazenar a tecla.
		RTS R7		; Retorno da subrotina correspondente à função.

;------------------------------------------------------------------------------
; Envia um caractere ASCII para o visor.
; Esse caractere pode ser um caractere visível ou um caractere de controle. 
; - Parâmetros de entrada: registrador R5, com o caractere a ser colocado no visor. 
; - Parâmetro de saída: registrador R0, com o código de erro de retorno. 
; O código no registrador R5 pode representar caracteres visíveis ou caracteres de controle. 
; Na inicialização do kernel, o visor deve ser limpo (apagado) e o cursor deve ser posicionado no início do visor. 
; A função retorna no registrador R0 um código de erro. 
; - Se não houve erro, o valor em R0 será zero; 
; - Se houve algum erro ou informação inválida de entrada, o valor em R0 será um valor qualquer diferente de zero. 
;------------------------------------------------------------------------------

_putchar:	CMP R5,#H08
		BEQ BackSpace	; Testa se o cursor deverá ser movido uma posição para a esquerda do visor (backspace, BS).
		CMP R5,#H0D
		BEQ ReturnC     ; Testa se o cursor deverá ser movido para a primeira posição à esquerda do visor (carriage return, CR).

		CMP R5,#H20
		BLT Invalido	; Testa se o valor de R5 está abaixo do limite inferior de caracteres.
		CMP R5,#H7A
		BGT Invalido	; Testa se o valor de R5 está acima do limite superior de caracteres.

		MOV #VISOR,R3
		ADD Cursor,R3	; Coloca o próximo valor a ser escrito no visor em R3.
		MOV R5,(R3)	; Move o caractere recebido em R5 para a posição do visor, que é indicada pelo cursor.
		CMP Cursor,#21
		BGE Fim
		INC Cursor	; Incrementa o cursor em uma unidade.
Fim:		CLR R0		; Coloca o valor 0 no registrador R0, indicando que não houve erro.
		RTS R7
		
Invalido:	MOV #1,R0	; Coloca o valor 1 no registrador R0, indicando erro.
		RTS R7		; Retorno da subrotina correspondente à função.

BackSpace:	CMP Cursor,#0	; Testa se o cursor está na última posição do visor.
		BEQ Fim
		DEC Cursor	; Decrementa o valor do cursor em uma unidade.
		JMP Fim

ReturnC:	MOV #0,Cursor	; Move o cursor para o início do visor.
		JMP Fim

;------------------------------------------------------------------------------
; Essa função fornece as informações relativas à situação atual de cada relógio, 
; no que diz respeito à sua visibilidade e se está andando. 
; - Parâmetros de entrada: registrador R5, com o identificador do relógio a ser lido.
;   Esse valor pode ser 0 (zero) ou 1 (um). 
; Outros valores devem ser ignorados. 
; - Parâmetro de saída: registrador R0, com a indicação do estado do relógio (visibilidade e se está parado). 
; No retorno da função, o registrador R0 conterá as informações do estado do relógio em seus bits 0 e bit 1. 
; O bit 0, quando ligado (valor “1”), indica que o relógio está visível;
; O bit 1, quando ligado (valor “1”), indica que o relógio está andando. 
;------------------------------------------------------------------------------

_get_clock_status:	CMP R5,#0 	; Verifica se o relógio 0 está sendo analisado.
			BEQ Aux1
			CMP R5,#1 	; Verifica se o relógio 1 está sendo analisado.
			BEQ Aux2
			MOV #65535,R0 	; Retorna 65535 em R0, indicando que houve erro.
			RTS R7		; Retorno da subrotina correspondente à função.

Aux1:			MOV Status0, R0 ; Retorna o status do relógio 0 em R0.
			RTS R7		; Retorno da subrotina correspondente à função.

Aux2:			MOV Status1, R0 ; Retorna o status do relógio 1 em R0.
			RTS R7		; Retorno da subrotina correspondente à função.
	
;------------------------------------------------------------------------------
; Essa função fornece o valor atual de cada relógio.
; Essa informação é fornecida como um número inteiro de segundos.
; Como cada relógio tem minutos e segundos,
;     o valor fornecido deverá ser o resultado da aplicação da seguinte fórula (60*MIN+SEG). 
; - Parâmetros de entrada: registrador R5, com o identificador do relógio a ser lido.
;   Esse valor pode ser 0 (zero) ou 1 (um). Outros valores devem ser ignorados. 
; - Parâmetro de saída: registrador R0, com o número de segundos atualmente presentes no relógio. 
; No retorno da função, o registrador R0 conterá o número de segundos correspondentes à informação atual no relógio.
; Essa informação corresponde àquela presente no relógio, independentemente de seu estado (visível/invisível ou parado/andando). 
;------------------------------------------------------------------------------

_get_clock_time:	CLR R0		; Zera o valor do registrador R0.
			CLR Count	; Zera a variável responsável por contar laços de somas.
			CMP R5,#0	; Analisa se o tempo do relógio 0 será retornado.
			BEQ Vezes60zero ; Retorna o tempo do relógio 0.
			CMP R5,#1	; Analisa se o tempo do relógio 0 será retornado.
			BEQ Vezes60um 	; Retorna o tempo do relógio 1.
			MOV #65535,R0	; Retorna 65535 em R0, indicando que houve erro.
			JMP Fim2

Vezes60zero:		ADD #60,R0	; Adiciona 60 em R0 sucessivas vezes.
			INC Count	; Incrementa o contador.
			CMP Count,Min0	; Verifica se o laço chegou ao fim.
			BEQ AdcSeg0	; Adiciona o tempo em segundos do relógio 0.
			JMP Vezes60Zero ; Repete a operação.

AdcSeg0:		ADD Seg0,R0	; Adiciona o tempo em segundos do relógio 1.
			JMP Arruma0	; Subtrai o tempo do relógio 0 em uma unidade, se necessário.

Vezes60um:		ADD #60,R0	; Adiciona 60 em R0 sucessivas vezes.
			INC Count	; Incrementa o contador.
			CMP Count,Min1	; Verifica se o laço chegou ao fim.
			BEQ AdcSeg1	; Adiciona o tempo em segundos do relógio 1.
			JMP Vezes60um	; Repete a operação.

AdcSeg1:		ADD Seg1,R0	; Adiciona o tempo em segundos do relógio 1.
			JMP Arruma1	; Subtrai o tempo do relógio 1 em uma unidade, se necessário.

Arruma0:		CMP Status0,#2 	; Verifica se o relógio 0 está andando.
			BEQ Aux3
			CMP Status0,#3	; Verifica se o relógio 0 está andando.
			BEQ Aux3
			JMP Fim2

Aux3:			DEC R0		; Subtrai o tempo do relógio 0 em uma unidade.
			JMP Fim2

Arruma1:		CMP Status1,#2 	; Verifica se o relógio 1 está andando.
			BEQ Aux4
			CMP Status1,#3 	; Verifica se o relógio 1 está andando.
			BEQ Aux4
			JMP Fim2

Aux4:			DEC R0		; Subtrai o tempo do relógio 1 em uma unidade,
			JMP Fim2

Fim2:			RTS R7		; Retorno da subrotina correspondente à função.
				
;------------------------------------------------------------------------------
; Essa função é usada para indicar ao kernel se o relógio deve “andar” ou “parar”.  
; - Parâmetros de entrada: 
;   - registrador R5, com o identificador do relógio a ser ativado/desativado.
;     Esse valor pode ser 0 (zero) ou 1 (um). Outros valores devem ser ignorados; 
;   - registrador R4, com a indicação do estado a ser colocado o relógio.
;     Esse valor pode ser 0 (zero), caso o relógio deva parar,
;     ou um valor diferente de 0 (zero), caso o relógio deva andar. 
; - Parâmetro de saída: registrador R0, com o código de erro de retorno. 
; A função retorna no registrador R0 um código de erro. 
; - Se não houve erro, o valor em R0 será zero; 
; - Se houve algum erro ou informação inválida de entrada,
;   o valor em R0 será um valor qualquer diferente de zero. 
;------------------------------------------------------------------------------

_turnon_clock:		CMP R5,#0	 ; Analisa se o relógio a ser alterado é o relógio 0.
			BEQ Analisa0
			CMP R5,#1	 ; Analisa se o relógio a ser alterado é o relógio 1.
			BEQ Analisa1
			JMP FimRuim	 ; Retorna 1 em R0, indicando que houve erro.

Analisa0:		CMP R4,#0
			BEQ Para0
			OR  #2,Status0	 ; Muda o estado do funcionamento do relógio 0 para ON (ligado).
			JMP FimBom	 ; Retorna 0 em R0, indicando que não houve erro.

Para0:			AND #253,Status0 ; Muda o estado do funcionamento do relógio 0 para OFF (desligado).
			JMP FimBom	 ; Retorna 0 em R0, indicando que não houve erro.

Analisa1:		CMP R4,#0
			BEQ Para1
			OR  #2,Status1 	 ; Muda o estado do funcionamento do relógio 1 para ON (ligado).
			JMP FimBom	 ; Retorna 0 em R0, indicando que não houve erro.

Para1:			AND #253,Status1 ; Muda o estado do funcionamento do relógio 1 para OFF (desligado).
			JMP FimBom	 ; Retorna 0 em R0, indicando que não houve erro.


FimBom:			MOV #0,R0	 ; Retorna 0 em R0, indicando que não houve erro.
			RTS R7		 ; Retorno da subrotina correspondente à função.


FimRuim:		MOV #1,R0	 ; Retorna 1 em R0, indicando que houve erro.
			RTS R7		 ; Retorno da subrotina correspondente à função.

;------------------------------------------------------------------------------
; Essa função é usada para indicar ao kernel que o relógio deve ser zerado.
; Ou seja, minutos e horas armazenado no relógio devem ser zerados. 
; - Parâmetros de entrada: registrador R5, com o identificador do relógio a ser zerado.
;   Esse valor pode ser 0 (zero) ou  1 (um). Outros valores devem ser ignorados; 
; - Parâmetro de saída: registrador R0, com o código de erro de retorno. 
; A função retorna no registrador R0 um código de erro. 
; - Se não houve erro, o valor em R0 será zero; 
; - Se houve algum erro ou informação inválida de entrada,
;          o valor em R0 será um valor qualquer diferente de zero. 
;------------------------------------------------------------------------------

_clr_clock:		CMP R5,#0	; Verifica se o relógio 0 deverá ser zerado.
			BEQ Fim4	; Zera todo o relógio 0.
			CMP R5,#1 	; Verifica se o relógio 1 deverá ser zerado.
			BEQ Fim5	; Zera todo o relógio 1.
			JMP Fim3	; Move 65535 para R0, indicando que houve erro.

Fim3:			MOV #65535,R0	; Move 65535 para R0, indicando que houve erro.
			RTS R7		; Retorno da subrotina correspondente à função.

Fim4:			CLR Min0	; Zera a quantidade de minutos do relógio 0.
			CLR Seg0 	; Zera a quantidade de segundos do relógio 0.
			MOV #'0',A_0	; Zera o primeiro dígito do relógio 0.
			MOV #'0',B_0	; Zera o segundo dígito do relógio 0.
			MOV #'0',C_0	; Zera o terceiro dígito do relógio 0.
			MOV #'0',D_0	; Zera o quarto dígito do relógio 0.
			JMP Fim6	; Move 0 para R0, indicando que não houve erro.

Fim5:			CLR Min1 	; Zera a quantidade de minutos do relógio 1.
			CLR Seg1 	; Zera a quantidade de segundos do relógio 1.
			MOV #'0',A_1	; Zera o primeiro dígito do relógio 1.
			MOV #'0',B_1 	; Zera o segundo dígito do relógio 1.
			MOV #'0',C_1	; Zera o terceiro dígito do relógio 1.
			MOV #'0',D_1	; Zera o quarto dígito do relógio 1.
			JMP Fim6	; Move 0 para R0, indicando que não houve erro.

Fim6:			MOV #0,R0 	; Move 0 para R0, indicando que não houve erro.
			RTS R7		; Retorno da subrotina correspondente à função.				

;------------------------------------------------------------------------------

; Função para limpar o visor.

Limpa:
		MOV		R0,-(R6)
		MOV		R1,-(R6)
		MOV		#65500,R1
		MOV		#36,R0

LimpaAux:
		CLR		(R1)
		INC		R1
		SOB		R0,LimpaAux
		MOV		(R6)+,R1
		MOV		(R6)+,R0
		RTS		R7

; Tratamento das interrupções:

ISR:
		MOV		R0,-(R6)	; Salva os conteúdos de todos os seis primeiros registradores na pilha.
		MOV		R1,-(R6)
		MOV		R2,-(R6)
		MOV		R3,-(R6)
		MOV		R4,-(R6)
		MOV		R5,-(R6)

		MOV		INTS,R0		; Verifica se é uma interrupção de teclado.
		AND		#2,R0
		BEQ		ISR2		; Tratamento da interrupção do timer.
		JSR		R7,ISRtec	; Tratamento da interrupção do teclado.
		AND		#HFFFD,INTS	; Desliga o bit de interrupção de teclado.
		JMP		ISR3		; Vai para o fim da rotina de interrupções.

ISR2:		JSR		R7,ISRtim	; Tratamento da interrupção do timer.
		AND		#HFFFE,INTS	; Desliga o bit de interrupção de timer.
		JMP		ISR3		; Vai para o fim da rotina de interrupções.

ShowClocks:	CMP		Status0,#1	; Verifica se o relógio 0 está andando.
		BEQ		Show0		; Coloca todos os dígitos do relógio 0 no visor.
		CMP		Status0,#3	; Verifica se o relógio 0 está andando.
		BEQ		Show0		; Coloca todos os dígitos do relógio 0 no visor.
Continue3:	CMP		Status1,#1	; Verifica se o relógio 1 está andando.
		BEQ		Show1		; Coloca todos os dígitos do relógio 1 no visor.
		CMP		Status1,#3	; Verifica se o relógio 1 está andando.
		BEQ		Show1		; Coloca todos os dígitos do relógio 1 no visor.
		JMP		Continue4

Show0:		MOV		A_0,65524	; Coloca todos os dígitos do relógio 0 no visor.
		MOV		B_0,65525
		MOV		#':',65526
		MOV		C_0,65527
		MOV		D_0,65528
		JMP		Continue3

Show1:		MOV		A_1,65531	; Coloca todos os dígitos do relógio 1 no visor.
		MOV		B_1,65532
		MOV		#':',65533
		MOV		C_1,65534
		MOV		D_1,65535
		JMP		Continue4

ISRtim:
		INC		Ciclo		; Incrementa a variável de tempo em uma unidade.
		CMP		#5,Ciclo
		BEQ		Pisca		; Faz o underscore piscar a cada meio segundo.
		CMP		#10,Ciclo
		BEQ		Pisca		; Faz o underscore piscar a cada meio segundo.
		BNE		ISRtim_fim	; Encerra a rotina de interrupção, pois ainda não passou um segundo.
Continue:	CLR 		Ciclo		; Reseta a variável ciclo.
		JMP		ShowClocks  	; Mostra todos os relógios em tempo real no visor.
Continue4:	CMP		Status0,#2	; Verifica se o bit "andando" do relógio 0 está ativado.
		BEQ		Atualiza0	; Atualiza o tempo do relógio 0.
		CMP		Status0,#3	; Verifica se o bit "andando" do relógio 0 está ativado.
		BEQ 		Atualiza0	; Atualiza o tempo do relógio 0.
Continue5:	CMP		Status1,#2	; Verifica se o bit "andando" do relógio 1 está ativado.
		BEQ		Atualiza1	; Atualiza o tempo do relógio 1.
		CMP		Status1,#3	; Verifica se o bit "andando" do relógio 1 está ativado.
		BEQ 		Atualiza1	; Atualiza o tempo do relógio 1.
ISRtim_Fim:	RTS		R7		; Retorno da subrotina correspondente à função.

Pisca:		MOV		Cursor,R1
		ADD		#65500,R1
		CMP 		(R1),#95	; Verifica se o caractere underscore está no visor.
		BEQ		PiscaAux1
		MOV		(R1),TeclaAux	; Armazena o ASCII do caractere da posição do cursor no visor na variável auxiliar.
		JMP 		PiscaAux2

PiscaAux1:	MOV 		TeclaAux,(R1)	; Coloca o caractere do visor na sua posição, no lugar do underscore.
		CMP		#10,Ciclo
		BEQ		Continue
		JMP 		ISRtim_fim

PiscaAux2:	MOV 		#95,(R1)	; Coloca o underscore do visor na sua posição, no lugar do caractere.
		CMP		#10,Ciclo
		BEQ		Continue
		JMP 		ISRtim_fim

Atualiza0:	INC		D_0
		INC		Seg0
		CMP		D_0,#58
		BEQ		OF_D0		; Vai para o tratamento de overflow do quarto dígito do relógio 0.
		JMP		Continue5

Atualiza1:	INC		D_1
		INC		Seg1
		CMP		D_1,#58
		BEQ		OF_D1		; Vai para o tratamento de overflow do quarto dígito do relógio 1.
		JMP		ISRtim_Fim

OF_D0:		MOV		#'0',D_0 	; Tratamento de overflow do quarto dígito do relógio 0.
		INC		C_0
		CMP		C_0,#'6'
		BEQ		OF_C0		; Vai para o tratamento de overflow do terceiro dígito do relógio 0.
		JMP		Continue5

OF_C0:		MOV		#'0',C_0	; Tratamento de overflow do terceiro dígito do relógio 0.
		CLR		Seg0
		INC		B_0
		INC		Min0
		CMP		B_0,#58
		BEQ 		OF_B0		; Vai para o tratamento de overflow do segundo dígito do relógio 0.
		JMP 		Continue5

OF_B0:		MOV		#'0',B_0	; Tratamento de overflow do segundo dígito do relógio 0.
		INC		A_0
		CMP		A_0,#'6'
		BEQ		OF_A0		; Vai para o zeramento de todos dígitos do relógio 0, pois foi atingida uma hora.
		JMP 		Continue5

OF_A0:		MOV 		#'0',A_0	; Zeramento de todos os dígitos do relógio 0, depois que o relógio 0 atinge uma hora.
		MOV 		#'0',B_0
		MOV 		#'0',C_0
		MOV 		#'0',D_0
		CLR		Seg0		; Zera o tempo em segundos do relógio 0 na variável correspondente.
		CLR		Min0		; Zera o tempo em minutos do relógio 0 na variável correspondente.
		JMP 		Continue5		

OF_D1:		MOV		#'0',D_1	; Tratamento de overflow do quarto dígito do relógio 1.
		INC		C_1
		CMP		C_1,#'6'
		BEQ		OF_C1		; Vai para o tratamento de overflow do terceiro dígito do relógio 1.
		JMP		ISRtim_Fim

OF_C1:		MOV		#'0',C_1	; Tratamento de overflow do terceiro dígito do relógio 1.
		CLR		Seg1
		INC		B_1
		INC		Min1
		CMP		B_1,#58
		BEQ 		OF_B1		; Vai para o tratamento de overflow do segundo dígito do relógio 1.
		JMP 		ISRtim_Fim

OF_B1:		MOV		#'0',B_1	; Tratamento de overflow do segundo dígito do relógio 1.
		INC		A_1
		CMP		A_1,#'6'
		BEQ		OF_A1		; Vai para o zeramento de todos dígitos do relógio 1, pois foi atingida uma hora.
		JMP 		ISRtim_Fim

OF_A1:		MOV 		#'0',A_1	; Zeramento de todos os dígitos do relógio 1, depois que o relógio 1 atinge uma hora.
		MOV 		#'0',B_1
		MOV 		#'0',C_1
		MOV 		#'0',D_1
		CLR		Seg1		; Zera o tempo em segundos do relógio 1 na variável correspondente.	
		CLR		Min1		; Zera o tempo em minutos do relógio 1 na variável correspondente.
		JMP 		ISRtim_Fim


ISRtec:		TST		TECST		; Testa se existe alguma tecla disponível.
		BEQ		ISRtec1
		CMP		TECDT,#44
		BEQ		Visivel_0	; Muda o estado de visibilidade do relogio 0, pois foi pressionada a tecla <, cujo ASCII é 44.
		CMP		TECDT,#46
		BEQ		Visivel_1	; Muda o estado de visibilidade do relogio 1, pois foi pressionada a tecla >, cujo ASCII é 46.
		MOV		TECDT,Tecla	; Armazena o conteúdo do teclado na variável tecla, caso a tecla seja válida.

ISRtec_2:	CLR		TECST		; Reseta o estado do teclado.

ISRtec1:	RTS		R7		; Retorno da subrotina correspondente à função.

Aparece0:	OR		#1,Status0	; Coloca o valor 1 no bit menos significativo do relógio 0, fazendo ele aparecer.
		MOV		A_0,65524	; Coloca todos os dígitos do relógio 0 no visor.
		MOV		B_0,65525
		MOV		#':',65526
		MOV		C_0,65527
		MOV		D_0,65528
		JMP		ISRtec_2

Visivel_0:	CMP		Status0,#0	; Verifica se o relógio 0 está invisível.
		BEQ		Aparece0	; Coloca o valor 1 no bit menos significativo do relógio 0, fazendo ele aparecer.
		CMP		Status0,#1	; Verifica se o relógio 0 está visível.
		BEQ		Desaparece0	; Coloca o valor 0 no bit menos significativo do relógio 0, fazendo ele desaparecer.
		CMP		Status0,#2	; Verifica se o relógio 0 está invisível.
		BEQ		Aparece0	; Coloca o valor 1 no bit menos significativo do relógio 0, fazendo ele aparecer.
		CMP		Status0,#3	; Verifica se o relógio 0 está visível.
		BEQ		Desaparece0	; Coloca o valor 0 no bit menos significativo do relógio 0, fazendo ele desaparecer.

Visivel_1:	CMP		Status1,#0	; Verifica se o relógio 1 está invisível.
		BEQ		Aparece1	; Coloca o valor 1 no bit menos significativo do relógio 1, fazendo ele aparecer.
		CMP		Status1,#1	; Verifica se o relógio 1 está visível.
		BEQ		Desaparece1	; Coloca o valor 0 no bit menos significativo do relógio 1, fazendo ele desaparecer.
		CMP		Status1,#2	; Verifica se o relógio 1 está invisível.
		BEQ		Aparece1	; Coloca o valor 1 no bit menos significativo do relógio 1, fazendo ele aparecer.
		CMP		Status1,#3	; Verifica se o relógio 1 está visível.
		BEQ		Desaparece1	; Coloca o valor 0 no bit menos significativo do relógio 1, fazendo ele desaparecer.

Desaparece0: 	AND		#HFE,Status0	; Coloca o valor 0 no bit menos significativo do relógio 1, fazendo ele desaparecer.
		MOV		#' ',65524	; Apaga todos os dígitos do relógio 0 no visor.
		MOV		#' ',65525
		MOV		#' ',65526
		MOV		#' ',65527
		MOV		#' ',65528
		JMP 		ISRtec_2

Aparece1:	OR		#1,Status1	; Coloca o valor 1 no bit menos significativo do relógio 1, fazendo ele aparecer.
		MOV		A_1,65531	; Coloca todos os dígitos do relógio 1 no visor.
		MOV		B_1,65532
		MOV		#':',65533
		MOV		C_1,65534
		MOV		D_1,65535
		JMP		ISRtec_2

Desaparece1: 	AND		#HFE,Status1	; Coloca o valor 0 no bit menos significativo do relógio 1, fazendo ele desaparecer.
		MOV		#' ',65531	; Apaga todos os dígitos do relógio 1 no visor.
		MOV		#' ',65532
		MOV		#' ',65533
		MOV		#' ',65534
		MOV		#' ',65535
		JMP		ISRtec_2

ISR3:		MOV		(R6)+,R5	; Retorna os conteúdos dos seis primeiros registradores, que estavam armazenados na pilha.
		MOV		(R6)+,R4
		MOV		(R6)+,R3
		MOV		(R6)+,R2
		MOV		(R6)+,R1
		MOV		(R6)+,R0

		RTI				; Retorna das interrupções.

; Declarações das variáveis internas do Kernel:

Cursor:		DW 0	; Variável responsável por indicar a posição do visor a ser preenchida.
Count:		DW 0    ; Variável responsável por auxiliar na operação de multiplicação.

Status0:	DW 0	; Variável responsável por indicar o status do relógio 0 (se está visível e se está andando).
Min0:		DW 0	; Variável responsável por indicar o tempo em minutos do relógio 0.
Seg0:		DW 0	; Variável responsável por indicar o tempo em segundos do relógio 0.

Status1:	DW 0	; Variável responsável por indicar o status do relógio 1 (se está visível e se está andando).
Min1:		DW 0	; Variável responsável por indicar o tempo em minutos do relógio 1.
Seg1:		DW 0	; Variável responsável por indicar o tempo em segundos do relógio 1.

Tecla:		DW 0	; Variável responsável por armazenar o ASCII de uma tecla digitada.
TeclaAux:	DW 0	; Variável responsável por armazenar o ASCII do caractere da posição do cursor no visor.

Ciclo:		DW 0	; Variável responsável por contabilizar tempo de meio segundo ou de um segundo na rotina de interrupção do timer.

A_0:		DW '0'	; Variável que representa o primeiro dígito do relógio 0.
B_0:		DW '0'	; Variável que representa o segundo dígito do relógio 0.
C_0:		DW '0'	; Variável que representa o terceiro dígito do relógio 0.
D_0:		DW '0'	; Variável que representa o quarto dígito do relógio 0.

A_1:		DW '0'	; Variável que representa o primeiro dígito do relógio 1.
B_1:		DW '0'	; Variável que representa o segundo dígito do relógio 1.
C_1:		DW '0'	; Variável que representa o terceiro dígito do relógio 1.
D_1:		DW '0'	; Variável que representa o quarto dígito do relógio 1.









